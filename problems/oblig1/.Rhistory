break
}
else {
exclude <- append(exclude, max_idx)
}
}
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear[,-exclude])
p_vals <- summary(fit)$coefficients[,4]
max_idx <- which.max(p_vals)
print(max_idx[1])
if(p_vals[max_idx] < 0.05) {
break
}
else {
exclude <- append(exclude, max_idx)
}
}
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear[,-exclude])
p_vals <- summary(fit)$coefficients[,4]
max_idx <- which.max(p_vals)
print(max_idx[2])
if(p_vals[max_idx] < 0.05) {
break
}
else {
exclude <- append(exclude, max_idx)
}
}
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear[,-exclude])
p_vals <- summary(fit)$coefficients[,4]
max_idx <- which.max(p_vals)
print(max_idx)
if(p_vals[max_idx] < 0.05) {
break
}
else {
exclude <- append(exclude, max_idx)
}
}
exclude
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear[,-exclude])
p_vals <- summary(fit)$coefficients[,4]
max_idx <- which.max(p_vals)
print(as.integer(max_idx))
if(p_vals[max_idx] < 0.05) {
break
}
else {
exclude <- append(exclude, max_idx)
}
}
exclude <- c(3)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear[,-exclude])
p_vals <- summary(fit)$coefficients[,4]
max_idx <- as.integer(which.max(p_vals))
if(p_vals[max_idx] < 0.05) {
break
}
else {
exclude <- append(exclude, max_idx)
}
}
exclude
summary(fit)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear[,-exclude])
p_vals <- summary(fit)$coefficients[,4]
max_idx <- as.integer(which.max(p_vals))
print(colnames(nuclear[,-exclude]))
if(p_vals[max_idx] < 0.05) {
break
}
else {
exclude <- append(exclude, max_idx)
}
}
exclude <- c(3)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear[,-exclude])
p_vals <- summary(fit)$coefficients[,4]
max_idx <- as.integer(which.max(p_vals))
print(colnames(nuclear[,-exclude]))
if(p_vals[max_idx] < 0.05) {
break
}
else {
exclude <- append(exclude, max_idx)
}
}
exclude <- c()
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear[,-exclude])
p_vals <- summary(fit)$coefficients[,4]
max_idx <- as.integer(which.max(p_vals))
print(colnames(nuclear[,-exclude]))
if(p_vals[max_idx] < 0.05) {
break
}
else {
exclude <- append(exclude, max_idx)
}
}
exclude <- c(0)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear[,-exclude])
p_vals <- summary(fit)$coefficients[,4]
max_idx <- as.integer(which.max(p_vals))
print(colnames(nuclear[,-exclude]))
if(p_vals[max_idx] < 0.05) {
break
}
else {
exclude <- append(exclude, max_idx)
}
}
exclude <- c(3)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear[,-exclude])
p_vals <- summary(fit)$coefficients[,4]
max_idx <- as.integer(which.max(p_vals))
print(colnames(nuclear[,-exclude]))
if(p_vals[max_idx] < 0.05) {
break
}
else {
exclude <- append(exclude, max_idx)
}
}
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear[,-exclude])
p_vals <- summary(fit)$coefficients[,4]
max_idx <- as.integer(which.max(p_vals))
print(colnames(nuclear[,-exclude]))
print(p_vals[max_idx])
if(p_vals[max_idx] < 0.05) {
break
}
else {
exclude <- append(exclude, max_idx)
}
}
exclude <- c(3)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear[,-exclude])
p_vals <- summary(fit)$coefficients[,4]
max_idx <- as.integer(which.max(p_vals))
print(colnames(nuclear[,-exclude]))
print(p_vals[max_idx])
if(p_vals[max_idx] < 0.05) {
break
}
else {
exclude <- append(exclude, max_idx)
}
}
exclude
nuclear_backwards_sub = data.frame(nuclear)
tracemem(nuclear_backwards_sub) == tracemem(nuclear)
nuclear_backwards_sub <- data.frame(nuclear)
tracemem(nuclear_backwards_sub) == tracemem(nuclear)
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[,4]
max_idx <- as.integer(which.max(p_vals))
print(colnames(nuclear[,-exclude]))
print(p_vals[max_idx])
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[-max_idx]
}
}
exclude
nuclear_backwards_sub
head(nuclear_backwards_sub)
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[,4]
max_idx <- as.integer(which.max(p_vals))
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[-max_idx]
}
}
summary(fit)
all.fit = lm(log(cost)~.-t1, data=nuclear)
summary(all.fit)
all.fit = lm(log(cost)~.-t1-bw1, data=nuclear)
all.fit = lm(log(cost)~.-t1, data=nuclear)
summary(all.fit)
all.fit = lm(log(cost)~.-t1-bw1, data=nuclear)
all.fit = lm(log(cost)~.-t1, data=nuclear)
summary(all.fit)
all.fit = lm(log(cost)~.-t1-bw, data=nuclear)
summary(all.fit)
all.fit = lm(log(cost)~.-t1-bw-t2, data=nuclear)
summary(all.fit)
all.fit = lm(log(cost)~.-t1-bw-t2--pr, data=nuclear)
summary(all.fit)
all.fit = lm(log(cost)~.-t1-bw-t2-pr, data=nuclear)
summary(all.fit)
all.fit = lm(log(cost)~.-t1-bw-t2-pr-cum.n, data=nuclear)
summary(all.fit)
all.fit = lm(log(cost)~.-t1-bw-t2-pr-cum.n-ct, data=nuclear)
summary(all.fit)
all.fit = lm(log(cost)~.-t1-bw-t2-pr-cum.n-ct-1, data=nuclear)
summary(all.fit)
all.fit = lm(log(cost)~.-t1-bw-t2-pr-cum.n-ct, data=nuclear)
summary(all.fit)
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[,4]
max_idx <- as.integer(which.max(p_vals))
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[-max_idx]
}
}
summary(fit)
summary(fit)$coefficients[,4]
summary(all.fit)$coefficients[,4]
summary(all.fit)$coefficients[-1,4]
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals))
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[-max_idx]
}
}
summary(fit)
all.fit = lm(log(cost)~.-t1-bw-t2-pr-cum.n-ct, data=nuclear)
summary(all.fit)
summary(fit)
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals)) + 1
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[-max_idx]
}
}
summary(fit)
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals)) - 1
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[-max_idx]
}
}
summary(fit)
all.fit = lm(log(cost)~.-t1-bw-t2-pr-cum.n-ct, data=nuclear)
summary(all.fit)
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals))
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
summary(fit)
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals)) + 1
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
summary(fit)
all.fit = lm(log(cost)~.-t1-bw-t2-pr-cum.n-ct, data=nuclear)
summary(all.fit)
print(p_vals[max_idx])
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals))
print(p_vals[max_idx])
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals))
print(p_vals[max_idx] < 0.05)
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals))
print(p_vals[max_idx] > 0.05)
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals))
print(p_vals[max_idx] < 0.05)
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals))
print(p_vals[max_idx])
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals)) + 1
print(p_vals[max_idx])
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals)) + 1
print(p_vals)
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals)) + 1
print(p_vals)
print(p_vals[max_idx])
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals)) - 1
print(p_vals)
print(p_vals[max_idx])
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals))
print(p_vals)
print(p_vals[max_idx])
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
fix(nuclear_backwards_sub)
nuclear_backwards_sub <- data.frame(nuclear)
fix(nuclear_backwards_sub)
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals))
print(p_vals)
print(p_vals[max_idx])
print(max_idx)
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
fix(nuclear_backwards_sub)
fix(nuclear_backwards_sub)
nuclear_backwards_sub <- data.frame(nuclear)
fix(nuclear_backwards_sub)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals))
print(p_vals)
print(p_vals[max_idx])
print(max_idx)
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-max_idx]
}
}
fix(nuclear)
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals))
print(p_vals)
print(p_vals[max_idx])
print(max_idx)
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-(max_idx+1)]
}
}
summary(fit)
all.fit = lm(log(cost)~.-t1-bw-t2-pr-cum.n-ct, data=nuclear)
summary(all.fit)
nuclear_backwards_sub <- data.frame(nuclear)
for (i in 1:ncol(nuclear)) {
fit <- lm(log(cost)~., data=nuclear_backwards_sub)
p_vals <- summary(fit)$coefficients[-1,4]
max_idx <- as.integer(which.max(p_vals))
if(p_vals[max_idx] < 0.05) {
break
}
else {
nuclear_backwards_sub <- nuclear_backwards_sub[,-(max_idx+1)] # Add one since we don't want to remove cost.
}
}
summary(fit)
plot(fit)
plot(fit)
plot(fit)
MSE = mean((cost-fit.predict))
MSE = mean((cost-fit.predicted))
MSE = mean((fit$residuals))
