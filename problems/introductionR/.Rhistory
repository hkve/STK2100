head(Auto)
Auto
libary("ISLR")
head(Auto)
library("ISLR")
head(Auto)
attach(Auto)
fix(Auto)
View(Auto)
View(Auto)
pairs(Auto)
qu = subset(Auto, select=-c(name))
head(qu)
quantitative = subset(Auto, select=-c(name))
View(qu)
View(qu)
View(qu)
rm(qu)
cov(quantitative)
cor(quantitative)
# Removes name coulumn
#quantitative = subset(Auto, select=-c(name))
quantitative = Auto[, -c("name")]
# Removes name coulumn
#quantitative = subset(Auto, select=-c(name))
quantitative = Auto[, !c("name")]
# Removes name coulumn
#quantitative = subset(Auto, select=-c(name))
quantitative = Auto[, names(Auto)!=c("name")]
View(quantitative)
fit1 = lm(mpg~ ., data=quantitative)
summary(fit1)
plot(fit1)
plot(fit1)
ible displacement.
# The year coef is positive, meaning newer cars use more fuel
# weight, year and origin are the most signif variables, possible displacement.
# The year coef is positive, meaning newer cars use more fuel
print(max(year))
# weight, year and origin are the most signif variables, possible displacement.
# The year coef is positive, meaning newer cars use more fuel
print(max(year), min(year))
# weight, year and origin are the most signif variables, possible displacement.
# The year coef is positive, meaning newer cars use more fuel
print(min(year))
plot(fit1)
pairs(Auto)
quantitative = quantitative[-c(14, 327, 394)]
head(quantitative)
View(quantitative)
quantitative = quantitative[-c(14, 327, 394),]
View(quantitative)
fit2 = lm(mpg~year+origin+displacement+weight*horsepower, data=Auto)
summary(fit2)
fit2 = lm(mpg~year+origin+displacement+weight+weight:horsepower, data=Auto)
summary(fit2)
fit2 = lm(mpg~year+origin+weight*horsepower, data=Auto)
summary(fit2)
pairs(cbind(year,origin))
fit2 = lm(mpg~year+factor(origin)+weight*horsepower, data=Auto)
summary(fit2)
fit3 = lm(log(mpg)~year+factor(origin)+weight*horsepower, data=Auto)
summary(fit2)
summary(fit3)
fit2 = lm(mpg~year+factor(origin)+weight*horsepower, data=quantitative)
summary(fit2)
fit3 = lm(log(mpg)~year+factor(origin)+weight*horsepower, data=quantitative)
summary(fit3)
R2_fit3 = (sum((exp(fit3)-mpg)^2))/(length(quantitative-1)*var(mpg))
R2_fit3 = (sum((exp(predict(fit3))-mpg)^2))/(length(quantitative-1)*var(mpg))
print(length(predict(fit3)))
print(mpg)
print(length(mpg)
print(length(mpg))
print(length(mpg))
print(length(predict(fit3)))
print(length(quantitative$mpg))
R2_fit3 = (sum((exp(predict(fit3))-quantitative$mpg)^2))/(length(quantitative-1)*var(mpg))
print(R2_fit3)
R2_fit3 = (sum((exp(predict(fit3))-quantitative$mpg)^2))/((length(quantitative)-1)*var(mpg))
print(R2_fit3)
R2_fit3 = (sum((exp(predict(fit3))-quantitative$mpg)^2))/((length(quantitative)-1)*var(quantitative$mpg))
print(R2_fit3)
R2_fit3 = 1-(sum((exp(predict(fit3))-quantitative$mpg)^2))/(sum((quantitative$mpg-mean(quantitative$mpg))^2))
print(R2_fit3)
transformed_R2 = function(fit, y, transform) {
plot(fit)
print(y)
print(typeof(transform))
}
transformed_R2(fit3, quantitative$mpg, exp)
transformed_R2 = function(fit, y, reverse_trans) {
y_predict = reverse_trans(predict(fit))
print(y_predict)
}
transformed_R2(fit3, quantitative$mpg, exp)
transformed_R2(fit3, quantitative$mpg, 2)
transformed_R2(fit3, quantitative$mpg, exp)
transformed_R2 = function(fit, y, reverse_trans) {
y_predict = reverse_trans(predict(fit))
RSS = sum((y-y_predict)^2)
TSS = sum((y-mean(y))^2)
1 - TSS/RSS
}
transformed_R2(fit3, quantitative$mpg, exp)
transformed_R2 = function(fit, y, reverse_trans) {
y_predict = reverse_trans(predict(fit))
RSS = sum((y-y_predict)^2)
#TSS = sum((y-mean(y))^2)
#1 - TSS/RSS
}
transformed_R2(fit3, quantitative$mpg, exp)
transformed_R2(fit3, quantitative$mpg, exp)
#R2_fit3 = 1-(sum((exp(predict(fit3))-quantitative$mpg)^2))/(sum((quantitative$mpg-mean(quantitative$mpg))^2))
print(sum((exp(predict(fit3))-quantitative$mpg)^2))
transformed_R2 = function(fit, y, reverse_trans) {
y_predict = reverse_trans(predict(fit))
RSS = sum((y-y_predict)^2)
#TSS = sum((y-mean(y))^2)
#1 - TSS/RSS
}
transformed_R2(fit3, quantitative$mpg, exp)
transformed_R2 = function(fit, y, reverse_trans) {
y_predict = reverse_trans(predict(fit))
RSS = sum((y-y_predict)^2)
#TSS = sum((y-mean(y))^2)
#1 - TSS/RSS
print(RSS)
}
transformed_R2(fit3, quantitative$mpg, exp)
#R2_fit3 = 1-(sum((exp(predict(fit3))-quantitative$mpg)^2))/(sum((quantitative$mpg-mean(quantitative$mpg))^2))
print(sum((exp(predict(fit3))-quantitative$mpg)^2))
transformed_R2 = function(fit, y, reverse_trans) {
y_predict = reverse_trans(predict(fit))
RSS = sum((y-y_predict)^2)
TSS = sum((y-mean(y))^2)
#1 - TSS/RSS
print(TSS)
}
#R2_fit3 = 1-(sum((exp(predict(fit3))-quantitative$mpg)^2))/(sum((quantitative$mpg-mean(quantitative$mpg))^2))
print(sum((quantitative$mpg-mean(quantitative$mpg))^2))
transformed_R2(fit3, quantitative$mpg, exp)
print(R2_fit3)
transformed_R2 = function(fit, y, reverse_trans) {
y_predict = reverse_trans(predict(fit))
RSS = sum((y-y_predict)^2)
TSS = sum((y-mean(y))^2)
1 - TSS/RSS
}
transformed_R2(fit3, quantitative$mpg, exp)
transformed_R2 = function(fit, y, reverse_trans) {
y_predict = reverse_trans(predict(fit))
RSS = sum((y-y_predict)^2)
TSS = sum((y-mean(y))^2)
(1 - TSS/RSS)
}
transformed_R2(fit3, quantitative$mpg, exp)
print(R2_fit3)
transformed_R2 = function(fit, y, reverse_trans) {
y_predict = reverse_trans(predict(fit))
RSS = sum((y-y_predict)^2)
TSS = sum((y-mean(y))^2)
1 - (TSS/RSS)
}
transformed_R2(fit3, quantitative$mpg, exp)
print(R2_fit3)
transformed_R2 = function(fit, y, reverse_trans) {
y_predict = reverse_trans(predict(fit))
RSS = sum((y-y_predict)^2)
TSS = sum((y-mean(y))^2)
1 - (RSS/TSS)
}
transformed_R2(fit3, quantitative$mpg, exp)
print(R2_fit3)
print(R2_fit3)
library(ISLR)
head(Carseats)
fix(Carseats)
typeof(Urban)
attach(Carseats)
typeof(Urban)
Urban = as.factor(Urban)
typeof(Urban)
Carseats$Urban = as.factor(Urban)
typeof(Urban)
source('~/Documents/skole/semester6/STK2100/problems/introductionR/chap3_10.R', echo=TRUE)
typeof(Urban)
typeof(Carseats$Urban)
Carseats$Urban = as.factor(Urban)
typeof(Carseats$Urban)
Carseats$Urban = as.factor(Carseats$Urban)
typeof(Carseats$Urban)
Carseats$Urban <- as.factor(Carseats$Urban)
typeof(Carseats$Urban)
Carseats$Urban <- factor(Carseats$Urban)
typeof(Carseats$Urban)
#Carseats$Urban <- as.factor(Carseats$Urban)
as.factor(Carseats$Urban)
typeof(Carseats$Urban)
typeof(Carseats$Urban[1])
typeof(Carseats$Urban[1])
print(Carseats$Urban[1])
Urban = as.factor(Urban)
US = as.factor(US)
fit1 = lm(Sales~Price+Urban+US, data=Carseats)
summary(fit1)
fit2 = lm(Sales~Price+US, data=Carseats)
summary(fti2)
summary(fit2)
MSE = function(fit) {
mean(fit$residuals^2)
}
MSE_1 = MSE(fit1)
MSE_2 = MSE(fit2)
print(MSE_1)
print(MSE_2)
plot(fit1)
plot(fit2)
confit(fit1)
confint(fit1)
confint(fit2)
confint(fit1, level=0.95)
confint(fit2, level=0.95)
source('~/Documents/skole/semester6/STK2100/problems/introductionR/chap3_10.R', echo=TRUE)
ggplot(data = Carseats) +
geom_point(aes=(x=Price, y=Sales))
library(ggplot2)
ggplot(data=Carseats) +
geom_point(aes=(x=Price, y=Sales))
ggplot(data=Carseats) +
geom_point(aes(x=Price, y=Sales))
ggplot(data=Carseats) +
geom_point(aes(x=Price, y=Sales, color=US))
ggplot(data=Carseats) +
geom_point(aes(x=Price, y=Sales, color=US, size=Urban))
ggplot(data=Carseats) +
geom_point(aes(x=Price, y=Sales, color=US, size=Urban))
ggplot(data=Carseats) +
geom_point(aes(x=Price, y=Sales, color=US))
ggplot(data=Carseats) +
geom_point(aes(x=Price, y=Sales, color=US, shape=Urban))
source('~/Documents/skole/semester6/STK2100/problems/introductionR/lab_4_6.R', echo=TRUE)
View(Smarket)
View(Smarket)
print(typeof(Smarket$Direction))
cor(Smarket)
cor(Smarket[, names!="Direction"])
cor(Smarket[, 9])
cor(Smarket[, -9])
plot(Volume)
plot(Years, Volume)
plot(Year, Volume)
fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, family = bionomial, data=Smarket)
fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, family = bionomial, data=Smarket)
fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, family = binomial, data=Smarket)
summary(fit)
predict(fit, type="response")
fit$probs[1:10]
print(fit$probs[1:10])
print(fit$probs)
Smarket$Direction = as.factor(Smarket$Direction)
fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, family = binomial, data=Smarket)
summary(fit)
predict(fit, type="response")
print(fit$probs)
fit.probs = predict(fit, type="response")
print(fit$probs[1:10])
print(fit.probs[1:10])
contrasts(Direction)
